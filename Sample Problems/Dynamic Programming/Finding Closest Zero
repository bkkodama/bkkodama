Time: O(N * M); iterate through the matrix twice, with size M x N
Space: O(1); only space needed is to store the return value

class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int row = mat.size();
        int col = mat[0].size();
        
        vector<vector<int>> ans(row, vector<int>(col, row + col));
        
        for(int i = 0; i < row; i++) 
        {
            for(int j = 0; j < col; j++) //initial loop for top>bottom, left>right
            {
                if(mat[i][j] == 0)
                {
                    ans[i][j] = 0;
                } else {
                    if(i > 0)
                    {
                        ans[i][j] = min(ans[i][j], ans[i - 1][j] + 1);
                    }
                    
                    if(j > 0)
                    {
                        ans[i][j] = min(ans[i][j], ans[i][j - 1] + 1);
                    }
                }
            }
        }
        
        for(int i = row - 1; i >= 0; i--)
        {
            for(int j = col - 1; j >= 0; j--) //second loop for bottom>top, right>left
            {
                if(mat[i][j] == 0)
                {
                    ans[i][j] = 0;
                } else {
                    if(i < row - 1)
                    {
                        ans[i][j] = min(ans[i][j], ans[i + 1][j] + 1);
                    }
                    
                    if(j < col - 1)
                    {
                        ans[i][j] = min(ans[i][j], ans[i][j + 1] + 1); //answer is the minimum of distance from each direction +1 (for itself)
                    }
                }
            }
        }
        
        return ans;
    }
};

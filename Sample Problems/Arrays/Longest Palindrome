Time: O(N^2); iterate through N letters, and max N/2 loops per letter
Space: O(1); stores a subtring with max length N

class Solution {
public:
    string longestPalindrome(string s) {
        int len = s.size();
        string ans = "";
        
        if(s.size() == 1) //base case for 1 letter
        {
            return s;
        }
        
        for(int i = 0; i < len; i++) //iterate through the string
        {
            string cur = subString(s, i, i); //for odd number of letters
            if(cur.size() > ans.size())
            {
                ans = cur;
            }
            
            cur = subString(s, i, i + 1); //for even number of letters
            if(cur.size() > ans.size())
            {
                ans = cur;
            }
        }
        
        return ans;
    }
    
    string subString(string s, int l, int r)
    {   
        while(l >= 0 && r < s.size() && s[l] == s[r]) //loop through both sides of initial letter(s)
        {
            l--;
            r++;
        }
        
        int n = (r) - (l + 1);
        
        return s.substr(l + 1, n);
    }
};

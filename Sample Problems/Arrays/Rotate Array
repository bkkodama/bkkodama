//Time: O(N); iterate through N items twice each
//Space: O(1); no extra space is used

//By reversing two subarrays using k as index, we create two subarrays in the opposite position with reversed members
//By reversing the entire array beforehand, the two subarrays will be in the right position with correct order

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if(k == 0 || k == nums.size() || nums.size() == 1)
        {
            return;
        }
        
        k = k % nums.size();
        
        reverse(nums, 0, nums.size() - 1); //first iteration reverses array
        reverse(nums, 0, k - 1);           //second and third iterations reverse subarrays using k as an index
        reverse(nums, k, nums.size() - 1);
    }
    
    void reverse(vector<int>& n, int begin, int end)
    {
        while(begin < end)
        {
            int temp = n[begin];
            n[begin] = n[end];
            n[end] = temp;
                
            begin++;
            end--;
        }
    }
};
